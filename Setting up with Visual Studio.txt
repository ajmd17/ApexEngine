I) OVERVIEW

There are currently two projects included. 

	- apex_engine: The core engine. Builds a static library which is then built into
		your game.
		
	- apex_tests: Currently includes the OpenGL code for doing rendering on desktop (Will likely be 
		moved into another library at some point). Also contains a runnable test of the engine.
		
		
II) SETTING UP THE ENGINE

apex_engine needs to be linked to Lua, for in-game scripting.
This includes adding the include directories, and static libraries.

1. Adding the directories

	- In Visual Studio, right click on the project "apex_tests". A property page should appear.
	- Click on "VC++ Directories". 
	- Click the arrow on "Include Directories" and click "<Edit...>"
	- There should be a new folder icon in the dialog. Click that and it will allow you 
		to add our include directories. We will actually only have to add two.
	- You can click "..." to navigate to the directories. They should look like this:
			"ProjectFolder\includes\Lua"
	-Repeat the same steps, only for "Library Directories" instead of "Include Directories".
		This time, you will add these directories:
			"ProjectFolder\libs\win32"
			
2. Linking the individual libraries

	- In the properties window, there will be an item titled "Librarian". Expand this and
		you will see another item below titled "General". Click this.
	- Click the arrow next to "Additional Dependencies". Click on "<Edit...>" and add this line:
			"lua53.lib"
	
apex_tests needs to be linked to these libraries:
	- The Apex Engine library itself, which should be placed inside "\vsXX\Debug\" folder.
	- SFML, which is used to create the window context on a desktop.

And must include these header folders:
	- The Apex Engine headers
	- GLEW, used to gain access to certain OpenGL commands that Windows doesn't
		give us access to by default
	- All the SFML headers
	
How to add the libraries and includes step by step:

1. Adding the directories

	- In Visual Studio, right click on the project "apex_tests". A property page should appear.
	- Click on "VC++ Directories". 
	- Click the arrow on "Include Directories" and click "<Edit...>"
	- There should be a new folder icon in the dialog. Click that and it will allow you 
		to add our include directories. We will actually only have to add two.
	- You can click "..." to navigate to the directories. They should look like this:
			"ProjectFolder\src\apex_engine"
			"ProjectFolder\includes"
		Where "ProjectFolder" is the actual folder that you downloaded.
	- Now we will add the libraries. The same rules apply for adding library directories 
		as adding include directories.
	- Once again, we only have to add two directories. They will look like this:
			"ProjectFolder\vsXX\Debug"
			"ProjectFolder\libs\win32"
		Once again, "ProjectFolder" is the folder that you downloaded. 
		vsXX will be the version of Visual Studio that the solution uses.
		Ex: Visual Studio 2015 will be "vs14".
	- Done adding directories! Now it's time to tell Visual Studio which specific libraries to use.
	
2. Linking the individual libraries

	- In the properties window, there will be an item titled "Linker". Expand this and
		you will see another item below titled "Input". Click this.
	- Click on "Additional Dependencies". You could add each library line by line, 
		but it's probably easier to just delete everything and paste this into it 
		(excluding quotation marks):
		
		"apex_engine_lib.lib;sfml-graphics.lib;sfml-window.lib;sfml-system.lib;glew32.lib;opengl32.lib;kernel32.lib;user32.lib;%(AdditionalDependencies)"

3. Done! 
	
	- Everything should compile now as planned. Thanks for checking out the engine.